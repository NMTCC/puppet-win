#control userpasswords2

$ErrorActionPreference
$ErrorActionPreference = "Continue"
$log = "c:\itc\log\1_err.log"
get-date | %{$start = $_; $_; $_ > $log}

"Put computer icon on user desktop:" | %{$_; $_ >> $log}
$path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel"
New-Item $path -force -itemtype RegistryKey | %{$_; $_ >> $log}
New-ItemProperty $path -name "{20D04FE0-3AEA-1069-A2D8-08002B30309D}" -propertyType dword | %{$_; $_ >> $log}

"Set computer icon label to system name:" | %{$_; $_ >> $log}
$me = [System.Security.Principal.NTAccount]"$env:userdomain\$env:username"
setacl -on "HKLM\SOFTWARE\Classes\CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}" -ot reg -actn setowner -ownr "n:$me;s:n" | out-default | %{$_; $_ >> $log}
setacl -on "HKLM\SOFTWARE\Classes\CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}" -ot reg -actn trustee -trst "n1:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464;n2:$me;s1:y;s2:n;ta:cpytrst;w:dacl" | out-default | %{$_; $_ >> $log}
Set-ItemProperty "HKLM:\Software\Classes\CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}" -name "LocalizedString" -value "%computername%" | out-default | %{$_; $_ >> $log}

"Disable Offline files:" | %{$_; $_ >> $log}
([wmiclass]"\\localhost\root\cimv2:win32_offlinefilescache").enable($false) | %{$_; $_ >> $log}

"Public Network is 0 and Work Network is 1"  | %{$_; $_ >> $log}
$nlm = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}"))
$nlm.getnetworkconnections() | %{$_.getnetwork().getcategory()}  | %{$_; $_ >> $log}


"Disable Firewall"  | %{$_; $_ >> $log}
#netsh firewall set opmode disable
netsh advfirewall set allprofiles state off


"Enable PS remoting:" | %{$_; $_ >> $log}
#Allow remote "net use * \\machine\shared$" connections full administrative rights
#new-itemproperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -name LocalAccountTokenFilterPolicy -propertyType DWord -value 1
Enable-PSRemoting -force 2>&1 | %{$_; $_ >> $log}
Set-Item -force WSMan:\localhost\Client\TrustedHosts *.nmt.edu 2>&1 | %{$_; $_ >> $log}
restart-Service winrm
#netsh advfirewall Firewall add rule name=AAAtcc-wsman protocol=tcp dir=in localport=5985 action=allow | out-default | %{$_; $_ >> $log}

"Activate previously installed product key:" | %{$_; $_ >> $log}
$p = get-wmiObject -query "`
SELECT * FROM SoftwareLicensingProduct`
  WHERE PartialProductKey <> null`
  AND ApplicationId='55c92734-d682-4d71-983e-d6ec3f16059f'`
  AND LicenseIsAddon=False"
$p.Activate() | %{$_; $_ >> $log}


"Activate dreamspark product keys (Visio/ Project):" | %{$_; $_ >> $log}
cscript 'C:\Program Files\Microsoft Office\Office15\OSPP.VBS' /act |  %{$_; $_ >> $log}



"Install non-language Windows Updates:" | %{$_; $_ >> $log}
$Session = New-Object -ComObject Microsoft.Update.Session
$Searcher = $Session.CreateUpdateSearcher()
$Result = $Searcher.Search("IsInstalled=0 and IsHidden=0")
$ToLoad = New-Object -ComObject Microsoft.Update.UpdateColl
$Result.Updates | where-Object {-not (($_.title -like "*Language Pack*") -or ($_.title -like "*Bing*"))} | ForEach-Object {$_.title; $ToLoad.Add($_)} | %{$_; $_ >> $log}
$ToLoad | ForEach-Object {$_.title}
if ($ToLoad.count) {
  $Downloader = $Session.CreateUpdateDownloader()
  $Downloader.Updates = $ToLoad
  $Downloader.Download() | %{$_; $_ >> $log}
  $ToLoad | ForEach-Object {$_.IsDownloaded} | %{$_; $_ >> $log}
  $Installer = $Session.CreateUpdateInstaller()
  $Installer.Updates = $ToLoad
  ($Installed = $Installer.Install()) | %{$_; $_ >> $log}
}

<#
"Remove user 'def':" | %{$_; $_ >> $log}
$hostObj = [ADSI]"WinNT://localhost"
$group = $hostObj.psbase.children.find("Administrators")  
$group.Name | %{$_; $_ >> $log}
$user = 'def'
$group.Remove("WinNT://$env:computername/$user")  
$group.psbase.invoke("Members") | %{$_.GetType().InvokeMember("Name",'GetProperty',$null,$_,$null)} | %{$_; $_ >> $log}
$hostObj.Delete("User",$user) | %{$_; $_ >> $log}
#>

"Change Authenticated Users' permissions on C:\ folders from Modify to ReadAndExecute:" | %{$_; $_ >> $log}
cd c:\
(get-item c:).getdirectories() | 
  Where-Object {($_.GetAccessControl().Access | % {$_.IdentityReference}) -contains 'NT AUTHORITY\Authenticated Users'} | 
  foreach-object {cacls $_.name /t /e /p "NT AUTHORITY\Authenticated Users:R" | out-null}

"Enable Remote Desktop --low-secutiry remote desktop and firewall:" | %{$_; $_ >> $log}
(Get-WmiObject -Class "Win32_TerminalServiceSetting" -Namespace root\cimv2\terminalservices).SetAllowTsConnections(1) | %{$_; $_ >> $log}
(Get-WmiObject -class "Win32_TSGeneralSetting" -Namespace root\cimv2\terminalservices -Filter "TerminalName='RDP-tcp'").SetUserAuthenticationRequired(0) | %{$_; $_ >> $log}
#netsh advfirewall Firewall set rule group="Remote Desktop" new enable=yes | out-default | %{$_; $_ >> $log}

"Enable ping:" | %{$_; $_ >> $log}
#netsh advfirewall firewall add rule protocol="icmpv4:8,any" dir=in action=allow name="allow ping" profile=any | out-default | %{$_; $_ >> $log}

"Turn UAC off:" | %{$_; $_ >> $log}
set-ItemProperty HkLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -name EnableLUA -value 0 | %{$_; $_ >> $log}


"Fix Python 2.7 install path registry:" | %{$_; $_ >> $log}
$path = "HkLM:\SOFTWARE\Wow6432Node\Python\PythonCore\2.7\InstallPath"
New-Item $path -force -itemtype RegistryKey | %{$_; $_ >> $log}
Set-Item $path -value 'C:\Python27\' | %{$_; $_ >> $log}

"Prevent regular users from changing timezone:" | %{$_; $_ >> $log}
ntrights -u Users -r SeTimeZonePrivilege

#remote -computername
#netsh advfirewall Firewall add rule name=tcc-epmap_49154 protocol=tcp dir=in localport=135,49154 action=allow
#netsh advfirewall Firewall add rule name=tcc-hostmon_llmr protocol=udp dir=in localport=5355 remoteport=5355 action=allow
#netsh advfirewall Firewall add rule name=tcc-49154 protocol=tcp dir=in localport=49154 action=allow
#netsh advfirewall Firewall add rule name=tcc-epmap protocol=tcp dir=in localport=135 action=allow
#netsh advfirewall firewall add rule name=tcc-icmp3 protocol="icmpv4:3,any" dir=in action=allow
#netsh advfirewall firewall add rule name=tcc-icmp6 protocol=icmpv6 dir=in action=allow
 
#"Allow net rpc commands from local network and WINS servers (to run nightly reboot on userhost):" | %{$_; $_ >> $log}
#netsh advfirewall Firewall add rule name=tcc-netlogon protocol=tcp dir=in localport=445 remoteip="LocalSubnet,WINS" action=allow | out-default | %{$_; $_ >> $log}


"Enable telnet:" | %{$_; $_ >> $log}
pkgmgr /iu:"TelnetClient" /quiet /norestart | out-default | %{$_; $_ >> $log}

"Set power plan so that machine does not sleep:" | %{$_; $_ >> $log}
$newplan = Get-WmiObject -Class win32_powerplan -Namespace root\cimv2\power -Filter "elementname='high performance'"
$iid = $newplan.InstanceID.ToString()
#$regex = [regex]"{(.*?)}$"
#$guid = $regex.Match($iid).groups[1].value
$guid = ( [regex]"{(.*?)}$" ).Match($iid).groups[1].value
powercfg -S $guid | out-default

"Disable computer restore:" | %{$_; $_ >> $log}
Disable-ComputerRestore -drive "C:\" | %{$_; $_ >> $log}


"Point Microsoft Office Professional Plus 2010 client to Key ManageSet Service host:" | %{$_; $_ >> $log}
#Run the next line just before final sysprep on the template image after the 25 day Office install grace period has expired
#& "\Program Files\Common Files\Microsoft Shared\OfficeSoftwareProtectionPlatform\ospprearm.exe"
cscript "\Program Files (x86)\Microsoft Office\Office15\ospp.vbs" /sethst:keymaster.nmt.edu
cscript "\Program Files (x86)\Microsoft Office\Office15\ospp.vbs" /act
#
"Make sure userhost and userhost2 are wins servers:" | %{$_; $_ >> $log}
$nics = Get-WmiObject Win32_NetworkAdapterConfiguration | Where{$_.IPEnabled -eq "TRUE"}
foreach($nic in $nics) {$x = $nic.SetWINSServer("129.138.4.64","129.138.4.65")}

#$secure = read-host -assecurestring
#********
#$encrypted = convertfrom-securestring -securestring $secure -key (1..16)
#$encrypted

"Reinstall and update Microsoft Security Essentials:" | %{$_; $_ >> $log}
cinst MicrosoftSecurityEssentials

#Chkconfig puppet service on
Set-Service puppet -StartupType Automatic


$domain = "TCC7"
"Join the $domain domain" | %{$_; $_ >> $log}
$username = "$domain\root"
$encrypted = "<%= @domainhash %>"
$password = ConvertTo-SecureString -string $encrypted -key (1..16)
"assigning credentials" | %{$_; $_ >> $log}
$myCred = New-Object System.Management.Automation.PSCredential $username, $password

"Starting loop:" | %{$_; $_ >> $log}
$i = 1
$ok = $FALSE
do {
  "Attempt $i to add $env:COMPUTERNAME to $domain`:" | %{$_; $_ >> $log}
  Add-Computer -DomainName $domain -Credential $mycred
  $ok = $?
  ""
  "`$ok = " + $ok | %{$_; $_ >> $log}
  "`$i = " + $i++ | %{$_; $_ >> $log}
  ""
}
while ((-not $ok) -and ($i -le 5))

'"Touch" c:\windows\TCC file if domain successfully joined:' | %{$_; $_ >> $log}
$flag = "c:\windows\TCC"
if ($ok) {
  "" > $flag
} else {
  if (test-path $flag) {
    del $flag
  }
}

#Autologon turned on in WAIK lets this script run at oobe boot
#Turn it off now that we are done
"Turn Autologon off:" | %{$_; $_ >> $log}
set-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\winlogon" -name AutoAdminLogon -value 0 | %{$_; $_ >> $log}

get-date | %{$end = $_; $_; $_ >> $log}
"Script run took: $($end - $start)" | %{$_; $_ >> $log}

$error | %{$_; $_ >> $log}
"Rebooting after joining $domain`:" | %{$msg = $_; $_; $_ >> $log}
Restart-Computer

